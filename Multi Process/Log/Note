对于O_APPEND和"a+"的一些解释：

1.这两个选项都是针对 “写” 操作，当某个进程打开以此方式打开文件后，每一次写操作，都会执行 “先定位到‘文件’的尾部，然后往里面写东西”，特别
  注意，这里是"定位到文件的尾部"，也就是说如果有多个进程在同时写文件，那么这些进程每次写都会自动查看文件的当前尾部在哪，然后再写，这样的
  话，“就一定不会出现互相覆盖的问题！！！！”，这也是这个选项的特别之处，这是一个“内核级别的选项，独立于进程”。

2.这两个选项对读操作不影响，多个进程打开文件读的时候，都是从文件0偏移量位置开始，且“互相不影响”，即如果多个进程同时读一个文件，那么他们
  读到的都是完整的。

3.如果又读又写呢？写操作会先获取当前文件的尾部，然后写东西进去，如果这个时候读，"那么这个时候什么都读不到"，因为在有O_APPEND和"a+"存在
  的情况下，文件游标(或者说文件偏移量)永远都在文件尾部，此时什么都读不到(除非可以设置读的方向为，从后往前读)。



   注意！一定要区分几个概念，不能混淆：
	1.文件偏移量是进程独有的，每个进程对于同一个文件的文件偏移量是互相独立的，互相不影响。
	2.O_APPEND和"a+"，会执行一次“获取当前文件的尾部”动作，而不是回去当前进程对文件的偏移量动作！！！这里很重要，这两个参数直接跳出
	  了进程的范畴，直接去文件系统中找当前文件的尾部在哪！！！这很吊！！！
	3.write和read虽然看起来是平级的，但是有差别，read只要使用文件偏移量就可以完成自己的任务了，完全不需要去文件系统中要资源和参数。
	  但是write有O_APPEND和"a+"的存在，需要文件系统协助才能正常工作！！！				
