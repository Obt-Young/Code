根据不同架构的机器，汇编语言的语法是不一样的，因为不同架构机器的指令集、总线宽度、寻址方式等都是不同的，所以如果是同一套汇编程序，在不同架构上是用不起来的，甚至，在相同
架构的不同结构的机器上也用不起来，这时候就需要一个统一的编程规范，C语言就出现了。
C语言提供了“接口”,让各个架构的汇编语言来实现，比如while循环改怎么写，long类型占用多少空间，如何完成加减乘除等等。这就是最早的面向接口编程思想。

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

自顶向下的编程模式：
顶是目标，从目标出发，遇到问题解决问题，问题大了再拆分，直至细化到函数

自下向上的编程模式：
还是从目标出发，思考达到这个目标需要哪些“配件”，做到把这些配件组合起来就能完成目标，之后在详细实现每一个配件。

异同：其实都需要前期设计，把每一个组件都考虑到，前者对计算机原理知识要求更高，因为搭建一个系统必须要知道哪些是可以实现，哪些是无法实现的。
      后者，更像一个现代化工厂，致力于研发各种各样稀奇古怪的配件，每个配件都要求有良好的接口。
      从规模上来说，后者要更大，因为会有很多用不到的配件；从整体开发周期上来讲，前者可能更短，因为是专用的，之间面向目标设计的；
      从扩展上来说，如果设计者很牛逼，那肯定后者更好，更方便拓展，系统也会越做越大，开发效率也会越来越快，但是如果是小工程，感觉有点过度设计，因为好多东西都用不上
      
	自顶向下，更简单粗暴，就是冲着目标去的，能做出更精美的作品。
	自下向上，更工程化，更符合工厂模式，以“组装”为中心思想，能做出更大型的作品。

	工期紧张的时候，前者要好，代码重构阶段，后者要好，完美的情况是，使用后者来设计，使用前者来实现细节，同时不断地重构

注：这两者只是编程模式，不是语言问题，更不是C和C++的区别，C语言完美模块化的工程很多，比如linux内核，nginx；使用c++做瀑布式开发的也有。这不是语言的区别，是编程理念的区别	

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


