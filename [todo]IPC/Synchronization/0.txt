在多个进程间共享一个资源时，可使用三种技术来完成：信号量、记录锁和互斥量。

信号量：先创建一个包含一个信号量的信号量集，然后将该信号量值初始化为1。调用semop时指定sem_op=-1来获取资源"锁"，调用semop时指定sem_op=+1来释放资源"锁"。另外，对每个semop操作都指定SEM_UNDO,用来处理在未释放资源条件下进程终止的情况。

记录锁：首先，创建一个空文件，使用该文件第一个字节作为锁字节(使用fcntl来对第一个字节加锁)。申请操作共享资源时，先对该字节请求一个写锁，如果成功，则可操作共享资源; 释放共享资源时，对该字节解锁。 记录锁相比于信号量的好处在于，锁的持有进程终止时，锁会被自动释放

互斥量：首先，需要所有进程将同一个文件映射到自己的内存中(mmap)，然后使用PTHREAD_PROCESS_SHARED互斥量属性在文件的相同偏移处，初始化互斥量。这个思路和记录锁很像，都是通过介质(文件)来完成同步的。如果一个进程没有释放一个信号量就终止了，那么恢复起来比较困难。



比较:记录锁比信号量快，互斥量比记录锁快。
     信号量更专业，但是用起来最复杂。
     综合考虑，记录锁是比较合适的选择，如果考虑功能复杂度，选信号量，如果考虑极限速度，选互斥量
