------------------------------------------------------------------------------------------------------------------------------------------
知识点
1-1 malloc alloc free等等类似函数属于库函数，不属于系统调用，这些函数调用sbrk来实现内存管理。
sbrk是系统调用，是内核管理内存对外的接口，这个函数既可以 ”分配内存“， 也可以”释放内存“，且管理粒度为“字节”。

1-2 在获取时间方面，内核”仅“提供一个接口，而这个接口返回的数值是”距离1970年1月1日的秒数“，然后其他的库函数通过获取和处理这系统调用的返回值，
来进一步加工成想要的时间格式

1-3 进程控制相关的系统调用(fork exec wait)通常让应用程序直接使用，但是也有相关的包裹库函数(exec系列函数，waitpid等等)，一般情况下不使用，
而是直接使用系统调用

编程练习 
1-1 ： 如果日历时间存放在带符号的32为整型数中，那么哪一年将会溢出？可以用什么样的方法来防止溢出？


------------------------------------------------------------------------------------------------------------------------------------------
2-1 因为各操作系统的系统调用可能在底层实现上存在差别，所以就需要一个统一的接口库，来方便应用程序使用，那么这个接口库就是
标准c库(比如c99/c11/...)，而这些库在我们的linux系统中就是 libc库，这个库的规划和定义是由 IEC来完成的。一般情况下，我们统称这些库为ISO C。
	正如ISO C的企划，libc被划分为24个”模块“，即24个头文件和他们的lib库，如下：
	
		头文件							说明
		<assert.h>						验证程序使用的断言库
		<ctype.h>						字符分类和映射支持库
		<errno.h>			1.7节		出错码及其配套的支持库
		<complex.h>						复数算术运算支持库
		<fenv.h>						浮点环境
		<float.h>						浮点常量及特性
		<inttypes.h>					整形格式变换
		<iso646.h>						赋值、关系和一元关系操作符宏 (运算符的定义都在这里面，+-*/%=><等等)
		<limits.h>			2.5节		实现常量(系统环境常量)
		<locale.h>						本地化类别及相关定义
		<math.h>						数学函数、类型声明及常量(三角函数啥的都在这里面)
		<setjmp.h>			7.10节		长跳转(非局部goto)
		<signal.h>			第10章		信号
		<stdarg.h>						可变长度参数表(如果需要可变长度参数功能，需要包含此头文件)
		<stdbool.h>						布尔类型和值
		<stddef.h>						标准定义
		<stdint.h>						整形
		<stdio.h>			第5章		标准I/O库
		<stdlib.h>						大杂烩，这种实用的函数
		<string.h>						字符串操作
		<tgmath.h>						通用类型数字宏
		<time.h>						时间和日期
		<wchar.h>						扩充的多字节和宽字符支持
		<wctype.h>						宽字符分类和映射支持
		
		再次声明：以上头文件都是用来描述libc.so，所有的库都在libc动态库里面，libc库是对使用c语言编程的最基本要求，后面还会有
		在linux下面使用c语言编程的补充要求(posix)
		
2-2 POSIX是由IEEE定义的一套接口(没有实现)，POSIX在包含了ISO C的基础上，还要求有如下内容：

		头文件							说明
		<aio.h>							异步io
		<cpio.h>						cpio归档值
		<dirent.h>			4.22节		目录项
	(*)	<dlfcn.h>						动态链接(运行时链接动态库，增加了灵活度，正常都是编译链接阶段指定动态库，这里可以再运行时加载)
		<fcntl.h>			3.14节		文件控制
		<fnmatch.h>						文件名匹配类型
		<glob.h>						路径名模式匹配与生成
		<grp.h>				6.4节		组文件
		<iconv.h>						代码集变换实用程序(？)
		<langinfo.h>					语言信息常量(？)
		<monetary.h>					货币类型与常量(？)
		<netdb.h>						网络数据库操作(？)
		<nl_types.h>					消息类
		<poll.h>			14.4.2节	投票函数
		<pthread.h>			11章12章	线程
		<pwd.h>				6.2节		口令文件
		<regex.h>						正则表达式
		<sched.h>						执行调度
		<semaphore.h>					信号量
		<strings.h>						字符串操作
		<tars.h>						归档值 
		<termios.h>			18章		终端io
		<unistd.h>						符号常量
		<wordexp.h>						字扩充类型
		<arpa/inet.h>		16章		因特网定义
		<net/if.h>			16章		套接字本地接口
		<netinet.h/in.h>	16.3节		因特网地址族
		<netinet/tcp.h>					传输控制协议定义
		<sys/mman.h>					存储管理声明
		<sys/select.h>		14.4.1节	select函数
		<sys/socket.h>		16章		套接字接口
		<sys/stat.h>		4章			文件状态
		<sys/statvfs.h>					文件系统信息
		<sys/times.h>		8.17节		进程时间
		<sys/types.h>		2.8节		基本系统数据类型
		<sys/un.h>			17.2节		unix域套接字
		<sys/utsname.h>		6.9节		系统名
		<sys/wait.h>		8.6节		进程控制
		<fmtmsg.h>						消息显示结构
		<fwt.h>				4.22节		文件树漫游
		<libgen.h>						路径名管理函数
		<nbdm.h>						数据库操作
		<search.h>						搜索表
		<syslog.h>			13.4节		系统出错日志记录
		<utmpx.h>						用户账户数据库
		<sys/ipc.h>			15.6节		IPC
		<sys/msg.h>			15.7节		XSI消息队列
		<sys/resource.h>	7.11节		资源操作
		<sys/sem.h>			15.8节		XSI信号量
		<sys/shm.h>			15.9节		XSI共享存储
		<sys/time.h>					时间类型
		<sys/uio.h>			14.6节		矢量io操作
		<mqueue.h>						消息队列
		<spawn.h>						实时spawn接口
		
2-3 有关限制，在limits.h中包含了系统参数的上下限，但是有时候想在运行时进行设置上下限，而不是在编译时，那么可以通过某些函数
	来达到目的，比如sysconf/pathconf/fpathconf
	
------------------------------------------------------------------------------------------------------------------------------------------

3-1 openat在多线程编程中的使用：
	openat不是ISO C中的，是POSIX中的，其出现主要用来解决两个问题：
		1.让同一个进程的多线程同时工作在不同的工作目录下成为可能(多线程的当前工作目录是和进程保持一致的)，具体如何操作？
		2.可以避免TOCTTOU错误
		
3-2 creat函数的一个弊端在于，”只能“以”只写“方式打开文件，如果想读这个文件，那么只能creat close open这样操作，因此尽量使用open加O_CREAT来完成
	文件的创建
	

3-3 
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
	