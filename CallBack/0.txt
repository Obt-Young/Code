所谓回调函数，就是将函数指针传递给另外一个函数，可以称接受函数指针的函数为  收纳函数  ，自己的地址被传出去的函数成为  被调函数。

那么既然是函数指针传递，那么 使用回调函数 和 直接顺序调用 有什么区别呢？如下：
(下面是伪代码，具体见1.c)
void (*a)()[100];	//100个指向void func()类型函数的指针数组

void func1()
{
	printf("被调函数-1");
}

void func2(void (*func)())
{
	static int i=0;
	printf("收纳函数");
	
	//情景1：立即执行被调函数
	func();

	//情景2：暂且收纳被调函数，当积满50个，一次性执行
	if(i++!=50)
	{
		a[i] = func;
	}
	else
	{
		int j=0;
		while(j++!=i)
		{
			a();	//调用被调函数
			a++;	//移动指针
		}
	}

}

小结：1.如果不使用回调函数模式的话，那么就指针顺序执行，此时和回调函数的场景1一样，即普通的函数调用机制也能完成回调函数的场景1功能
      2.但是如果想做函数注册的话(比如signal函数)，那么普通的函数调用模式就比较麻烦，因为是顺序执行的，前一个函数不返回不能向下走，此时情景2就发挥作用了
        ，我可以收纳函数指针，然后在某个条件满足(这里是静态变量i增长到50)时，一次性调用

      3.主要区别就在于对函数指针的使用上，当拥有函数指针ptr时，只能通过ptr()来调用函数，仅仅使用ptr只是使用函数的地址，不能进入函数执行。
